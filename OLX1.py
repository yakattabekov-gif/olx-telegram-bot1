# olx_bot_full_v7.py
import logging
import requests
import re
from html import escape
from bs4 import BeautifulSoup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters
from urllib.parse import quote
from datetime import datetime, timedelta

# ---------------- CONFIG ----------------
TELEGRAM_TOKEN = "8112382224:AAFLpLO-nTgVvrAb2zFJ29AjFbK73yDHuNc"
ADMIN_USERNAME = "yakattabekov"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/120 Safari/537.36"
}
ADMIN_PAGE_SIZE = 5
MAX_SAVED_QUERIES = 2000

# ---------------- State ----------------
user_queries = []  # {"id","username","name","text","time"}
admin_state = {}   # {user_id: {"mode":"main","page":0,"selected_user":None,"waiting_username":False,"waiting_days":False,"target_username":""}}
subscriptions = {}  # {user_id: {"active": True, "until": datetime}}
CURRENCY_SYMBOLS = {"KZT": "‚Ç∏"}

# ---------------- Logging ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s - %(message)s")

# ---------------- Helpers ----------------
def _format_amount(amount, currency="KZT"):
    try:
        val = float(amount)
        if val.is_integer():
            formatted = f"{int(val):,}".replace(",", " ")
        else:
            formatted = f"{val:,.2f}".replace(",", " ").replace(".", ",")
        sym = CURRENCY_SYMBOLS.get(currency, "")
        return f"{formatted} {sym}"
    except:
        return str(amount)

def _normalize_price_text(s):
    if not s: return s
    s = s.strip()
    s = re.sub(r'\s+', ' ', s)
    s = re.sub(r'(?i)\b—Ç–≥\.?\b', '‚Ç∏', s)
    s = re.sub(r'(?i)\b—Ç–µ–Ω–≥–µ\b', '‚Ç∏', s)
    return s

def fetch_price_from_html(url):
    try:
        r = requests.get(url, headers=HEADERS, timeout=12)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        container = soup.select_one('div[data-testid="ad-price-container"] h3')
        if container:
            return _normalize_price_text(container.get_text(" ", strip=True))
        return None
    except:
        return None

def get_unique_users():
    """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤"""
    unique_users = {}
    for query in user_queries:
        user_id = query["id"]
        if user_id not in unique_users:
            unique_users[user_id] = {
                "id": user_id,
                "username": query["username"],
                "name": query["name"],
                "last_activity": query["time"],
                "query_count": 0
            }
        unique_users[user_id]["query_count"] += 1
        if query["time"] > unique_users[user_id]["last_activity"]:
            unique_users[user_id]["last_activity"] = query["time"]
    return list(unique_users.values())

def get_user_queries(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return [q for q in user_queries if q["id"] == user_id]

def find_user_by_username(username):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    username = username.replace("@", "").lower()
    for query in user_queries:
        if query["username"].lower() == username:
            return query["id"]
    return None

def is_subscription_active(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    if user_id in subscriptions:
        sub = subscriptions[user_id]
        if sub["active"] and sub["until"] > datetime.now():
            return True
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptions[user_id]["active"] = False
    return False

# ---------------- Extractors ----------------
def _extract_city(offer):
    loc = offer.get("locations_resolved") or offer.get("location") or {}
    if isinstance(loc, dict):
        if "name" in loc and isinstance(loc["name"], str):
            return loc["name"]
        if isinstance(loc.get("city"), dict):
            return loc.get("city", {}).get("name")
    return "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"

def _extract_date(offer):
    dt = offer.get("created_time") or offer.get("created_at") or offer.get("publication_time") or offer.get("date")
    if isinstance(dt, str) and "T" in dt:
        return dt.split("T")[0]
    return dt or "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

def _extract_url(offer):
    link = offer.get("url")
    if not link:
        path = offer.get("path")
        if path:
            if path.startswith("/"): link = "https://www.olx.kz" + path
            else: link = "https://www.olx.kz/" + path
    return link

def _extract_price_from_offer_object(offer):
    try:
        price_obj = offer.get("price") or {}
        value_obj = price_obj.get("value") or {}
        amount = None
        currency = None
        if isinstance(value_obj, dict):
            amount = value_obj.get("amount") or value_obj.get("value")
            currency = value_obj.get("currency") or price_obj.get("currency")
        if amount:
            return _format_amount(amount, currency or "KZT")
    except:
        pass
    return None

def _extract_description(offer):
    desc = offer.get("description") or offer.get("content") or ""
    desc = re.sub(r"<[^>]+>", "", desc)
    return (desc[:200] + "...") if len(desc) > 200 else desc

# ---------------- OLX search ----------------
def search_olx(query, max_results=6):
    query_for_url = quote(query)
    url = f"https://www.olx.kz/api/v1/offers/?offset=0&limit={max_results}&query={query_for_url}"
    try:
        r = requests.get(url, headers={"User-Agent": HEADERS["User-Agent"], "Accept": "application/json"}, timeout=12)
        r.raise_for_status()
        data = r.json()
        offers = data.get("data") or data.get("offers") or []
    except:
        offers = []

    results = []
    for offer in offers:
        title = offer.get("title") or offer.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        price_text = _extract_price_from_offer_object(offer)
        city = _extract_city(offer)
        date = _extract_date(offer)
        link = _extract_url(offer)
        desc = _extract_description(offer)
        try:
            price_num = float(re.sub(r"[^\d]", "", str(price_text or "0")))
        except:
            price_num = 0
        results.append({
            "title": title,
            "price": price_text,
            "price_num": price_num,
            "city": city,
            "date": date,
            "url": link,
            "desc": desc
        })

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
    results.sort(key=lambda x: x["price_num"])
    return results

def calculate_profit_analysis(items):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã
    prices = [item["price_num"] for item in items if item["price_num"] > 0]
    
    if len(prices) < 2:
        return {"avg_price": 0, "min_price": 0, "max_price": 0}
    
    avg_price = sum(prices) / len(prices)
    min_price = min(prices)
    max_price = max(prices)
    
    return {
        "avg_price": avg_price,
        "min_price": min_price,
        "max_price": max_price
    }

# ---------------- Handlers ----------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    kb = [[KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]]
    if user and user.username == ADMIN_USERNAME:
        kb.append([KeyboardButton("üîê Admin Panel")])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ OLX –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç üìä", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user = msg.from_user
    text = (msg.text or "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if user.username == ADMIN_USERNAME and user.id in admin_state:
        state = admin_state[user.id]
        
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç username –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        if state.get("waiting_username"):
            username = text.replace("@", "").lower()
            user_id = find_user_by_username(username)
            if user_id:
                state["target_user_id"] = user_id
                state["target_username"] = username
                state["waiting_username"] = False
                state["waiting_days"] = True
                await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–π–¥–µ–Ω!\n\nüìÖ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
                return
            else:
                await msg.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n\nüë§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π username –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
                return
        
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        elif state.get("waiting_days"):
            try:
                days = int(text)
                if days <= 0:
                    await msg.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                
                target_user_id = state["target_user_id"]
                target_username = state["target_username"]
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                subscriptions[target_user_id] = {
                    "active": True,
                    "until": datetime.now() + timedelta(days=days)
                }
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state["waiting_username"] = False
                state["waiting_days"] = False
                state["target_user_id"] = None
                state["target_username"] = None
                
                await msg.reply_text(
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{target_username}\n"
                    f"‚è∞ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                    f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {(datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d %H:%M')}",
                    parse_mode="HTML"
                )
                return
                
            except ValueError:
                await msg.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
                return

    # –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    user_queries.append({
        "id": user.id,
        "username": user.username or "",
        "name": f"{user.first_name or ''} {user.last_name or ''}".strip(),
        "text": text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    if len(user_queries) > MAX_SAVED_QUERIES:
        user_queries.pop(0)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        if user.username == ADMIN_USERNAME:
            await msg.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        elif is_subscription_active(user.id):
            sub = subscriptions[user.id]
            await msg.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub['until'].strftime('%Y-%m-%d %H:%M')}")
        else:
            await msg.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
        return

    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    if text == "üîê Admin Panel" and user.username == ADMIN_USERNAME:
        await admin_panel_command(update, context)
        return

    if not text:
        await msg.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å –Ω–∞ OLX üôÇ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.username != ADMIN_USERNAME:
        if not is_subscription_active(user.id):
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/yakattabekov")
            ]])
            await msg.reply_text(
                "üö´ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                "üíé –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –µ—ë –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return

    await msg.reply_text("üîé –ò—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ OLX...")
    items = search_olx(text)
    if not items:
        await msg.reply_text("üòî –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    # –î–æ–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω—ã –∏–∑ HTML –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    for item in items:
        if not item["price"] or item["price"] == "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞":
            if item.get("url"):
                html_price = fetch_price_from_html(item["url"])
                if html_price: 
                    item["price"] = html_price
                    try:
                        item["price_num"] = float(re.sub(r"[^\d]", "", html_price))
                    except:
                        item["price_num"] = 0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç-–∞–Ω–∞–ª–∏–∑
    analysis = calculate_profit_analysis(items)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    if analysis["avg_price"] > 0:
        summary = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b>\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {_format_amount(analysis['avg_price'])}\n"
            f"üü¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {_format_amount(analysis['min_price'])}\n"
            f"üî¥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {_format_amount(analysis['max_price'])}\n"
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(items)}\n\n"
        )
        await msg.reply_text(summary, parse_mode="HTML")

    for item in items:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
        if item["price_num"] > 0 and analysis["avg_price"] > 0:
            # –ü—Ä–æ—Ñ–∏—Ç = –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –≤—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            profit_amount = analysis["avg_price"] - item["price_num"]
            profit_percent = (profit_amount / analysis["avg_price"]) * 100
            
            if profit_amount > 1000:  # –¶–µ–Ω–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π - –í–´–ì–û–î–ù–û
                profit_text = f"üü¢ +{_format_amount(profit_amount)} (+{profit_percent:.1f}%)"
            elif profit_amount < -1000:  # –¶–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π - –î–û–†–û–ì–û
                profit_text = f"üî¥ {_format_amount(profit_amount)} ({profit_percent:.1f}%)"
            else:  # –¶–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ —Å—Ä–µ–¥–Ω–µ–π
                profit_text = f"üü° {_format_amount(profit_amount)} ({profit_percent:.1f}%)"
        else:
            profit_text = "‚Äî"

        text_msg = (
            f"üìå <b>{escape(item['title'])}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{escape(str(item['price']))}</b>\n"
            f"üíé –ü—Ä–æ—Ñ–∏—Ç: {profit_text}\n"
            f"üìç –ì–æ—Ä–æ–¥: {escape(item['city'])}\n"
            f"üóì –î–∞—Ç–∞: {escape(item['date'])}\n"
            f"üìù {escape(item['desc'])}"
        )
        
        reply_markup = None
        if item.get("url"):
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url=item["url"])]])

        await msg.reply_text(text_msg, parse_mode="HTML", reply_markup=reply_markup)

# ---------------- Admin Panel ----------------
async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.username != ADMIN_USERNAME:
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    admin_state[user.id] = {"mode": "main", "page": 0, "waiting_username": False, "waiting_days": False}
    await _send_main_admin_menu(update, user.id)

async def _send_main_admin_menu(update_or_query, user_id, edit=False):
    total_queries = len(user_queries)
    unique_users = get_unique_users()
    active_subs = sum(1 for uid in subscriptions if is_subscription_active(uid))
    
    text = (
        f"üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n\n"
        f"üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_logs")],
        [InlineKeyboardButton("üé´ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_give_sub")],
        [InlineKeyboardButton("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subs")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update_or_query, "message"):
        if edit: 
            await update_or_query.message.edit_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else: 
            await update_or_query.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await update_or_query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    if query.from_user.username != ADMIN_USERNAME:
        await query.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await query.answer()
    
    state = admin_state.get(user_id, {"mode": "main", "page": 0})
    
    if data == "admin_close":
        await query.message.delete()
        return
    
    elif data == "admin_back":
        state["mode"] = "main"
        await _send_main_admin_menu(query, user_id, edit=True)
        return
    
    elif data == "admin_user_logs":
        state["mode"] = "user_logs"
        state["page"] = 0
        await _send_users_list(query, user_id, edit=True)
        return
    
    elif data == "admin_give_sub":
        state["waiting_username"] = True
        state["waiting_days"] = False
        await query.edit_message_text(
            "üé´ <b>–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "üë§ –ù–∞–ø–∏—à–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
            parse_mode="HTML"
        )
        return
        
    elif data == "admin_subs":
        state["mode"] = "subs"
        await _send_subs_menu(query, user_id, edit=True)
        return
    
    elif data.startswith("user_select_"):
        selected_user_id = int(data.replace("user_select_", ""))
        state["selected_user"] = selected_user_id
        state["mode"] = "user_messages"
        state["page"] = 0
        await _send_user_messages(query, user_id, selected_user_id, edit=True)
        return
    
    elif data in ["users_prev", "users_next", "messages_prev", "messages_next"]:
        if "prev" in data:
            state["page"] = max(0, state["page"] - 1)
        else:
            state["page"] += 1
            
        if data.startswith("users_"):
            await _send_users_list(query, user_id, edit=True)
        elif data.startswith("messages_"):
            await _send_user_messages(query, user_id, state["selected_user"], edit=True)
        return
    
    elif data == "sub_on_all":
        for user_query in user_queries:
            uid = user_query["id"]
            subscriptions[uid] = {"active": True, "until": datetime.now() + timedelta(days=30)}
        await query.edit_message_text("‚úÖ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π!")
        return
    
    elif data == "sub_off_all":
        for uid in subscriptions:
            subscriptions[uid]["active"] = False
        await query.edit_message_text("‚ùå –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    admin_state[user_id] = state

async def _send_users_list(query, user_id, edit=True):
    state = admin_state[user_id]
    users = get_unique_users()
    
    page = state["page"]
    total = len(users)
    pages = max(1, (total - 1) // ADMIN_PAGE_SIZE + 1)
    
    start_idx = page * ADMIN_PAGE_SIZE
    end_idx = start_idx + ADMIN_PAGE_SIZE
    users_page = users[start_idx:end_idx]
    
    text = f"üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages})\n\n"
    
    keyboard = []
    for user in users_page:
        status = "‚úÖ" if is_subscription_active(user["id"]) else "‚ùå"
        user_text = f"{status} {user['name']} (@{user['username']}) - {user['query_count']} —Å–æ–æ–±—â–µ–Ω–∏–π"
        keyboard.append([InlineKeyboardButton(user_text, callback_data=f"user_select_{user['id']}")])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="users_prev"))
    if page < pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="users_next"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def _send_user_messages(query, admin_user_id, selected_user_id, edit=True):
    state = admin_state[admin_user_id]
    messages = get_user_queries(selected_user_id)
    
    if not messages:
        await query.edit_message_text("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    page = state["page"]
    total = len(messages)
    pages = max(1, (total - 1) // ADMIN_PAGE_SIZE + 1)
    
    start_idx = page * ADMIN_PAGE_SIZE
    end_idx = start_idx + ADMIN_PAGE_SIZE
    messages_page = messages[start_idx:end_idx]
    
    user_info = messages[0]  # –ë–µ—Ä–µ–º –∏–Ω—Ñ–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    text = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
    text += f"üë§ {user_info['name']} (@{user_info['username']})\n"
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages}\n\n"
    
    for i, msg in enumerate(messages_page, 1):
        text += f"<b>{i}. {msg['time']}</b>\n"
        text += f"üìù {escape(msg['text'][:150])}{'...' if len(msg['text']) > 150 else ''}\n\n"
    
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="messages_prev"))
    if page < pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="messages_next"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_logs")])
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

async def _send_subs_menu(query, admin_user_id, edit=True):
    text = (
        f"üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–º (30 –¥–Ω–µ–π)", callback_data="sub_on_all")],
        [InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–º", callback_data="sub_off_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# ---------------- Main ----------------
def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_admin_callback))
    logging.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    run_bot()
